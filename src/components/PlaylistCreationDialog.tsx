
"use client"
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog"

import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select"

import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
import { Button, buttonVariants } from "@/components/ui/button";
import { format } from "date-fns"
import * as z from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { useUserStore } from "@/store/userStore";
import { toast } from "sonner"
import { useEffect, useState } from "react"
import { Textarea } from "./ui/textarea"
import { useBookmarkStore } from "@/store/bookmarkStore"
import { TTrack } from "@/types/spotify"
import { useRouter } from 'next/navigation'
import { useAudioPlayerStore } from "@/store/audioPlayerStore"

const formSchema = z.object({
    name: z.string().min(5, { message: "Please enter a name" }),
    description: z.string().min(10, { message: "Please enter a description" }),
    public: z.boolean().default(false)
})

/**
 * Combines track IDs into an array of Spotify track URIs
 * @param bookmarks Array of bookmark objects containing track IDs
 * @returns Array of Spotify track URIs
 */
const combineTrackIds = (bookmarks: TTrack[]): string[] => {
    const baseUrl = "spotify:track:";
    return bookmarks.map(bookmark => `${baseUrl}${bookmark.id}`);
}

const PlaylistCreationDialog = ({ }) => {
    const router = useRouter()
    const { spotifyUserId } = useUserStore(state => state)
    const [defaultName, setDefaultName] = useState(`Recommender - ${format(new Date(), "dd/MM/yyyy HH:mm:ss")}`);
    const { bookmarks, setBookmarks } = useBookmarkStore(state => state)
    const { setStop } = useAudioPlayerStore(state => state)

    const form = useForm({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: defaultName,
            description: "A playlist generated by PlaylistPioneer",
            public: false
        },
    });

    useEffect(() => {
        const interval = setInterval(() => {
            const newName = `PlaylistPioneer - ${format(new Date(), "dd/MM/yyyy HH:mm:ss")}`;
            if (form.watch('name') === defaultName) {
                setDefaultName(newName);
                form.setValue('name', newName, { shouldDirty: true });
            }
        }, 1000);

        return () => clearInterval(interval);
    }, [form, defaultName]);

    /**
     * Handles form submission
     * If no bookmarks saved, show error toast and redirect to home
     * If bookmarks saved, create playlist and add tracks
     * @param values 
     * @returns 
     */
    async function onSubmit(values: z.infer<typeof formSchema>) {
        if (bookmarks.length === 0) {
            toast.error("Playlist not created, no bookmarks saved");
            router.push(`/`)
            return
        }
        const createPlaylist = await fetch(`/api/create-playlist?userId=${spotifyUserId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(values)

        })
        await createPlaylist.json()

        const getPlaylist = await fetch(`/api/create-playlist?userId=${spotifyUserId}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            },
        })

        const playlist = await getPlaylist.json()

        const addTracks = await fetch(`/api/add-tracks-to-playlists`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                playlist_id: playlist.playlist.id,
                uris: combineTrackIds(bookmarks)
            })
        });

        await addTracks.json()
        setBookmarks(() => []);
        setStop()
        toast.success("Playlist created, check out your Spotify account!");
        router.push(`/`)

    }
    return (
        <Dialog>
            <DialogTrigger
                onClick={() => {
                    setStop()
                }}
                className={cn(buttonVariants({ variant: "outline" }), "w-1/3 mx-auto my-4",)}>
                Generate playlist
            </DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>
                        Create a playlist
                    </DialogTitle>
                    <DialogDescription>
                        Enter a name and description for your playlist.
                    </DialogDescription>
                </DialogHeader>
                <div className="flex flex-col gap-y-3">

                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                            <FormField
                                control={form.control}
                                name="name"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Playlist Name</FormLabel>

                                        <FormControl>
                                            <Input placeholder="cool playlist name" {...field} />
                                        </FormControl>
                                        <div className="flex items-center justify-between">
                                            <Button
                                                type="button"
                                                variant="link"
                                                onClick={() => {
                                                    form.setValue('name', defaultName, { shouldDirty: true });
                                                }}
                                            >Use Default Name</Button>
                                            <Button
                                                type="button"
                                                variant="link"
                                                onClick={() => {
                                                    form.setValue('name', "", { shouldDirty: true });
                                                }}
                                            >Clear Playlist Name</Button>
                                        </div>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="description"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Description</FormLabel>
                                        <FormControl>
                                            <Textarea placeholder="How you feel when you listening these tracks?" {...field} />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <FormField
                                control={form.control}
                                name="public"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Playlist visibility</FormLabel>
                                        <Select onValueChange={field.onChange} defaultValue={"false"}>
                                            <FormControl>
                                                <SelectTrigger>
                                                    <SelectValue placeholder="Private" />                                                </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                <SelectItem value="false">Private</SelectItem>
                                                <SelectItem value="true">Public</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <Button className={cn("w-full")} type="submit">Submit</Button>
                        </form>
                    </Form>

                </div>
            </DialogContent>
        </Dialog>

    );
};

export default PlaylistCreationDialog;
